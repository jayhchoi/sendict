// Code generated by Prisma (prisma@1.31.1). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  dictionary: (where?: DictionaryWhereInput) => Promise<boolean>;
  sentence: (where?: SentenceWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  dictionary: (where: DictionaryWhereUniqueInput) => DictionaryPromise;
  dictionaries: (args?: {
    where?: DictionaryWhereInput;
    orderBy?: DictionaryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Dictionary>;
  dictionariesConnection: (args?: {
    where?: DictionaryWhereInput;
    orderBy?: DictionaryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => DictionaryConnectionPromise;
  sentence: (where: SentenceWhereUniqueInput) => SentencePromise;
  sentences: (args?: {
    where?: SentenceWhereInput;
    orderBy?: SentenceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Sentence>;
  sentencesConnection: (args?: {
    where?: SentenceWhereInput;
    orderBy?: SentenceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SentenceConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createDictionary: (data: DictionaryCreateInput) => DictionaryPromise;
  updateDictionary: (args: {
    data: DictionaryUpdateInput;
    where: DictionaryWhereUniqueInput;
  }) => DictionaryPromise;
  upsertDictionary: (args: {
    where: DictionaryWhereUniqueInput;
    create: DictionaryCreateInput;
    update: DictionaryUpdateInput;
  }) => DictionaryPromise;
  deleteDictionary: (where: DictionaryWhereUniqueInput) => DictionaryPromise;
  deleteManyDictionaries: (where?: DictionaryWhereInput) => BatchPayloadPromise;
  createSentence: (data: SentenceCreateInput) => SentencePromise;
  updateSentence: (args: {
    data: SentenceUpdateInput;
    where: SentenceWhereUniqueInput;
  }) => SentencePromise;
  updateManySentences: (args: {
    data: SentenceUpdateManyMutationInput;
    where?: SentenceWhereInput;
  }) => BatchPayloadPromise;
  upsertSentence: (args: {
    where: SentenceWhereUniqueInput;
    create: SentenceCreateInput;
    update: SentenceUpdateInput;
  }) => SentencePromise;
  deleteSentence: (where: SentenceWhereUniqueInput) => SentencePromise;
  deleteManySentences: (where?: SentenceWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  dictionary: (
    where?: DictionarySubscriptionWhereInput
  ) => DictionarySubscriptionPayloadSubscription;
  sentence: (
    where?: SentenceSubscriptionWhereInput
  ) => SentenceSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type SentenceOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "english_ASC"
  | "english_DESC"
  | "korean_ASC"
  | "korean_DESC"
  | "source_ASC"
  | "source_DESC"
  | "label_ASC"
  | "label_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type DictionaryOrderByInput = "id_ASC" | "id_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "username_ASC"
  | "username_DESC"
  | "avatar_ASC"
  | "avatar_DESC"
  | "password_ASC"
  | "password_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type DictionaryWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface SentenceWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  english?: String;
  english_not?: String;
  english_in?: String[] | String;
  english_not_in?: String[] | String;
  english_lt?: String;
  english_lte?: String;
  english_gt?: String;
  english_gte?: String;
  english_contains?: String;
  english_not_contains?: String;
  english_starts_with?: String;
  english_not_starts_with?: String;
  english_ends_with?: String;
  english_not_ends_with?: String;
  korean?: String;
  korean_not?: String;
  korean_in?: String[] | String;
  korean_not_in?: String[] | String;
  korean_lt?: String;
  korean_lte?: String;
  korean_gt?: String;
  korean_gte?: String;
  korean_contains?: String;
  korean_not_contains?: String;
  korean_starts_with?: String;
  korean_not_starts_with?: String;
  korean_ends_with?: String;
  korean_not_ends_with?: String;
  source?: String;
  source_not?: String;
  source_in?: String[] | String;
  source_not_in?: String[] | String;
  source_lt?: String;
  source_lte?: String;
  source_gt?: String;
  source_gte?: String;
  source_contains?: String;
  source_not_contains?: String;
  source_starts_with?: String;
  source_not_starts_with?: String;
  source_ends_with?: String;
  source_not_ends_with?: String;
  label?: String;
  label_not?: String;
  label_in?: String[] | String;
  label_not_in?: String[] | String;
  label_lt?: String;
  label_lte?: String;
  label_gt?: String;
  label_gte?: String;
  label_contains?: String;
  label_not_contains?: String;
  label_starts_with?: String;
  label_not_starts_with?: String;
  label_ends_with?: String;
  label_not_ends_with?: String;
  author?: UserWhereInput;
  dictionaries_every?: DictionaryWhereInput;
  dictionaries_some?: DictionaryWhereInput;
  dictionaries_none?: DictionaryWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: SentenceWhereInput[] | SentenceWhereInput;
  OR?: SentenceWhereInput[] | SentenceWhereInput;
  NOT?: SentenceWhereInput[] | SentenceWhereInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  username?: String;
  username_not?: String;
  username_in?: String[] | String;
  username_not_in?: String[] | String;
  username_lt?: String;
  username_lte?: String;
  username_gt?: String;
  username_gte?: String;
  username_contains?: String;
  username_not_contains?: String;
  username_starts_with?: String;
  username_not_starts_with?: String;
  username_ends_with?: String;
  username_not_ends_with?: String;
  avatar?: String;
  avatar_not?: String;
  avatar_in?: String[] | String;
  avatar_not_in?: String[] | String;
  avatar_lt?: String;
  avatar_lte?: String;
  avatar_gt?: String;
  avatar_gte?: String;
  avatar_contains?: String;
  avatar_not_contains?: String;
  avatar_starts_with?: String;
  avatar_not_starts_with?: String;
  avatar_ends_with?: String;
  avatar_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  mySentences_every?: SentenceWhereInput;
  mySentences_some?: SentenceWhereInput;
  mySentences_none?: SentenceWhereInput;
  dictionary?: DictionaryWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface DictionaryWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  user?: UserWhereInput;
  sentences_every?: SentenceWhereInput;
  sentences_some?: SentenceWhereInput;
  sentences_none?: SentenceWhereInput;
  AND?: DictionaryWhereInput[] | DictionaryWhereInput;
  OR?: DictionaryWhereInput[] | DictionaryWhereInput;
  NOT?: DictionaryWhereInput[] | DictionaryWhereInput;
}

export type SentenceWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
  username?: String;
}>;

export interface DictionaryCreateInput {
  user: UserCreateOneWithoutDictionaryInput;
  sentences?: SentenceCreateManyWithoutDictionariesInput;
}

export interface UserCreateOneWithoutDictionaryInput {
  create?: UserCreateWithoutDictionaryInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateWithoutDictionaryInput {
  email: String;
  username: String;
  avatar: String;
  password: String;
  name: String;
  mySentences?: SentenceCreateManyWithoutAuthorInput;
}

export interface SentenceCreateManyWithoutAuthorInput {
  create?:
    | SentenceCreateWithoutAuthorInput[]
    | SentenceCreateWithoutAuthorInput;
  connect?: SentenceWhereUniqueInput[] | SentenceWhereUniqueInput;
}

export interface SentenceCreateWithoutAuthorInput {
  english: String;
  korean: String;
  source?: String;
  label?: String;
  dictionaries?: DictionaryCreateManyWithoutSentencesInput;
}

export interface DictionaryCreateManyWithoutSentencesInput {
  create?:
    | DictionaryCreateWithoutSentencesInput[]
    | DictionaryCreateWithoutSentencesInput;
  connect?: DictionaryWhereUniqueInput[] | DictionaryWhereUniqueInput;
}

export interface DictionaryCreateWithoutSentencesInput {
  user: UserCreateOneWithoutDictionaryInput;
}

export interface SentenceCreateManyWithoutDictionariesInput {
  create?:
    | SentenceCreateWithoutDictionariesInput[]
    | SentenceCreateWithoutDictionariesInput;
  connect?: SentenceWhereUniqueInput[] | SentenceWhereUniqueInput;
}

export interface SentenceCreateWithoutDictionariesInput {
  english: String;
  korean: String;
  source?: String;
  label?: String;
  author: UserCreateOneWithoutMySentencesInput;
}

export interface UserCreateOneWithoutMySentencesInput {
  create?: UserCreateWithoutMySentencesInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateWithoutMySentencesInput {
  email: String;
  username: String;
  avatar: String;
  password: String;
  name: String;
  dictionary: DictionaryCreateOneWithoutUserInput;
}

export interface DictionaryCreateOneWithoutUserInput {
  create?: DictionaryCreateWithoutUserInput;
  connect?: DictionaryWhereUniqueInput;
}

export interface DictionaryCreateWithoutUserInput {
  sentences?: SentenceCreateManyWithoutDictionariesInput;
}

export interface DictionaryUpdateInput {
  user?: UserUpdateOneRequiredWithoutDictionaryInput;
  sentences?: SentenceUpdateManyWithoutDictionariesInput;
}

export interface UserUpdateOneRequiredWithoutDictionaryInput {
  create?: UserCreateWithoutDictionaryInput;
  update?: UserUpdateWithoutDictionaryDataInput;
  upsert?: UserUpsertWithoutDictionaryInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateWithoutDictionaryDataInput {
  email?: String;
  username?: String;
  avatar?: String;
  password?: String;
  name?: String;
  mySentences?: SentenceUpdateManyWithoutAuthorInput;
}

export interface SentenceUpdateManyWithoutAuthorInput {
  create?:
    | SentenceCreateWithoutAuthorInput[]
    | SentenceCreateWithoutAuthorInput;
  delete?: SentenceWhereUniqueInput[] | SentenceWhereUniqueInput;
  connect?: SentenceWhereUniqueInput[] | SentenceWhereUniqueInput;
  set?: SentenceWhereUniqueInput[] | SentenceWhereUniqueInput;
  disconnect?: SentenceWhereUniqueInput[] | SentenceWhereUniqueInput;
  update?:
    | SentenceUpdateWithWhereUniqueWithoutAuthorInput[]
    | SentenceUpdateWithWhereUniqueWithoutAuthorInput;
  upsert?:
    | SentenceUpsertWithWhereUniqueWithoutAuthorInput[]
    | SentenceUpsertWithWhereUniqueWithoutAuthorInput;
  deleteMany?: SentenceScalarWhereInput[] | SentenceScalarWhereInput;
  updateMany?:
    | SentenceUpdateManyWithWhereNestedInput[]
    | SentenceUpdateManyWithWhereNestedInput;
}

export interface SentenceUpdateWithWhereUniqueWithoutAuthorInput {
  where: SentenceWhereUniqueInput;
  data: SentenceUpdateWithoutAuthorDataInput;
}

export interface SentenceUpdateWithoutAuthorDataInput {
  english?: String;
  korean?: String;
  source?: String;
  label?: String;
  dictionaries?: DictionaryUpdateManyWithoutSentencesInput;
}

export interface DictionaryUpdateManyWithoutSentencesInput {
  create?:
    | DictionaryCreateWithoutSentencesInput[]
    | DictionaryCreateWithoutSentencesInput;
  delete?: DictionaryWhereUniqueInput[] | DictionaryWhereUniqueInput;
  connect?: DictionaryWhereUniqueInput[] | DictionaryWhereUniqueInput;
  set?: DictionaryWhereUniqueInput[] | DictionaryWhereUniqueInput;
  disconnect?: DictionaryWhereUniqueInput[] | DictionaryWhereUniqueInput;
  update?:
    | DictionaryUpdateWithWhereUniqueWithoutSentencesInput[]
    | DictionaryUpdateWithWhereUniqueWithoutSentencesInput;
  upsert?:
    | DictionaryUpsertWithWhereUniqueWithoutSentencesInput[]
    | DictionaryUpsertWithWhereUniqueWithoutSentencesInput;
  deleteMany?: DictionaryScalarWhereInput[] | DictionaryScalarWhereInput;
}

export interface DictionaryUpdateWithWhereUniqueWithoutSentencesInput {
  where: DictionaryWhereUniqueInput;
  data: DictionaryUpdateWithoutSentencesDataInput;
}

export interface DictionaryUpdateWithoutSentencesDataInput {
  user?: UserUpdateOneRequiredWithoutDictionaryInput;
}

export interface DictionaryUpsertWithWhereUniqueWithoutSentencesInput {
  where: DictionaryWhereUniqueInput;
  update: DictionaryUpdateWithoutSentencesDataInput;
  create: DictionaryCreateWithoutSentencesInput;
}

export interface DictionaryScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  AND?: DictionaryScalarWhereInput[] | DictionaryScalarWhereInput;
  OR?: DictionaryScalarWhereInput[] | DictionaryScalarWhereInput;
  NOT?: DictionaryScalarWhereInput[] | DictionaryScalarWhereInput;
}

export interface SentenceUpsertWithWhereUniqueWithoutAuthorInput {
  where: SentenceWhereUniqueInput;
  update: SentenceUpdateWithoutAuthorDataInput;
  create: SentenceCreateWithoutAuthorInput;
}

export interface SentenceScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  english?: String;
  english_not?: String;
  english_in?: String[] | String;
  english_not_in?: String[] | String;
  english_lt?: String;
  english_lte?: String;
  english_gt?: String;
  english_gte?: String;
  english_contains?: String;
  english_not_contains?: String;
  english_starts_with?: String;
  english_not_starts_with?: String;
  english_ends_with?: String;
  english_not_ends_with?: String;
  korean?: String;
  korean_not?: String;
  korean_in?: String[] | String;
  korean_not_in?: String[] | String;
  korean_lt?: String;
  korean_lte?: String;
  korean_gt?: String;
  korean_gte?: String;
  korean_contains?: String;
  korean_not_contains?: String;
  korean_starts_with?: String;
  korean_not_starts_with?: String;
  korean_ends_with?: String;
  korean_not_ends_with?: String;
  source?: String;
  source_not?: String;
  source_in?: String[] | String;
  source_not_in?: String[] | String;
  source_lt?: String;
  source_lte?: String;
  source_gt?: String;
  source_gte?: String;
  source_contains?: String;
  source_not_contains?: String;
  source_starts_with?: String;
  source_not_starts_with?: String;
  source_ends_with?: String;
  source_not_ends_with?: String;
  label?: String;
  label_not?: String;
  label_in?: String[] | String;
  label_not_in?: String[] | String;
  label_lt?: String;
  label_lte?: String;
  label_gt?: String;
  label_gte?: String;
  label_contains?: String;
  label_not_contains?: String;
  label_starts_with?: String;
  label_not_starts_with?: String;
  label_ends_with?: String;
  label_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: SentenceScalarWhereInput[] | SentenceScalarWhereInput;
  OR?: SentenceScalarWhereInput[] | SentenceScalarWhereInput;
  NOT?: SentenceScalarWhereInput[] | SentenceScalarWhereInput;
}

export interface SentenceUpdateManyWithWhereNestedInput {
  where: SentenceScalarWhereInput;
  data: SentenceUpdateManyDataInput;
}

export interface SentenceUpdateManyDataInput {
  english?: String;
  korean?: String;
  source?: String;
  label?: String;
}

export interface UserUpsertWithoutDictionaryInput {
  update: UserUpdateWithoutDictionaryDataInput;
  create: UserCreateWithoutDictionaryInput;
}

export interface SentenceUpdateManyWithoutDictionariesInput {
  create?:
    | SentenceCreateWithoutDictionariesInput[]
    | SentenceCreateWithoutDictionariesInput;
  delete?: SentenceWhereUniqueInput[] | SentenceWhereUniqueInput;
  connect?: SentenceWhereUniqueInput[] | SentenceWhereUniqueInput;
  set?: SentenceWhereUniqueInput[] | SentenceWhereUniqueInput;
  disconnect?: SentenceWhereUniqueInput[] | SentenceWhereUniqueInput;
  update?:
    | SentenceUpdateWithWhereUniqueWithoutDictionariesInput[]
    | SentenceUpdateWithWhereUniqueWithoutDictionariesInput;
  upsert?:
    | SentenceUpsertWithWhereUniqueWithoutDictionariesInput[]
    | SentenceUpsertWithWhereUniqueWithoutDictionariesInput;
  deleteMany?: SentenceScalarWhereInput[] | SentenceScalarWhereInput;
  updateMany?:
    | SentenceUpdateManyWithWhereNestedInput[]
    | SentenceUpdateManyWithWhereNestedInput;
}

export interface SentenceUpdateWithWhereUniqueWithoutDictionariesInput {
  where: SentenceWhereUniqueInput;
  data: SentenceUpdateWithoutDictionariesDataInput;
}

export interface SentenceUpdateWithoutDictionariesDataInput {
  english?: String;
  korean?: String;
  source?: String;
  label?: String;
  author?: UserUpdateOneRequiredWithoutMySentencesInput;
}

export interface UserUpdateOneRequiredWithoutMySentencesInput {
  create?: UserCreateWithoutMySentencesInput;
  update?: UserUpdateWithoutMySentencesDataInput;
  upsert?: UserUpsertWithoutMySentencesInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateWithoutMySentencesDataInput {
  email?: String;
  username?: String;
  avatar?: String;
  password?: String;
  name?: String;
  dictionary?: DictionaryUpdateOneRequiredWithoutUserInput;
}

export interface DictionaryUpdateOneRequiredWithoutUserInput {
  create?: DictionaryCreateWithoutUserInput;
  update?: DictionaryUpdateWithoutUserDataInput;
  upsert?: DictionaryUpsertWithoutUserInput;
  connect?: DictionaryWhereUniqueInput;
}

export interface DictionaryUpdateWithoutUserDataInput {
  sentences?: SentenceUpdateManyWithoutDictionariesInput;
}

export interface DictionaryUpsertWithoutUserInput {
  update: DictionaryUpdateWithoutUserDataInput;
  create: DictionaryCreateWithoutUserInput;
}

export interface UserUpsertWithoutMySentencesInput {
  update: UserUpdateWithoutMySentencesDataInput;
  create: UserCreateWithoutMySentencesInput;
}

export interface SentenceUpsertWithWhereUniqueWithoutDictionariesInput {
  where: SentenceWhereUniqueInput;
  update: SentenceUpdateWithoutDictionariesDataInput;
  create: SentenceCreateWithoutDictionariesInput;
}

export interface SentenceCreateInput {
  english: String;
  korean: String;
  source?: String;
  label?: String;
  author: UserCreateOneWithoutMySentencesInput;
  dictionaries?: DictionaryCreateManyWithoutSentencesInput;
}

export interface SentenceUpdateInput {
  english?: String;
  korean?: String;
  source?: String;
  label?: String;
  author?: UserUpdateOneRequiredWithoutMySentencesInput;
  dictionaries?: DictionaryUpdateManyWithoutSentencesInput;
}

export interface SentenceUpdateManyMutationInput {
  english?: String;
  korean?: String;
  source?: String;
  label?: String;
}

export interface UserCreateInput {
  email: String;
  username: String;
  avatar: String;
  password: String;
  name: String;
  mySentences?: SentenceCreateManyWithoutAuthorInput;
  dictionary: DictionaryCreateOneWithoutUserInput;
}

export interface UserUpdateInput {
  email?: String;
  username?: String;
  avatar?: String;
  password?: String;
  name?: String;
  mySentences?: SentenceUpdateManyWithoutAuthorInput;
  dictionary?: DictionaryUpdateOneRequiredWithoutUserInput;
}

export interface UserUpdateManyMutationInput {
  email?: String;
  username?: String;
  avatar?: String;
  password?: String;
  name?: String;
}

export interface DictionarySubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: DictionaryWhereInput;
  AND?: DictionarySubscriptionWhereInput[] | DictionarySubscriptionWhereInput;
  OR?: DictionarySubscriptionWhereInput[] | DictionarySubscriptionWhereInput;
  NOT?: DictionarySubscriptionWhereInput[] | DictionarySubscriptionWhereInput;
}

export interface SentenceSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: SentenceWhereInput;
  AND?: SentenceSubscriptionWhereInput[] | SentenceSubscriptionWhereInput;
  OR?: SentenceSubscriptionWhereInput[] | SentenceSubscriptionWhereInput;
  NOT?: SentenceSubscriptionWhereInput[] | SentenceSubscriptionWhereInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Dictionary {
  id: ID_Output;
}

export interface DictionaryPromise extends Promise<Dictionary>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  sentences: <T = FragmentableArray<Sentence>>(args?: {
    where?: SentenceWhereInput;
    orderBy?: SentenceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface DictionarySubscription
  extends Promise<AsyncIterator<Dictionary>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  sentences: <T = Promise<AsyncIterator<SentenceSubscription>>>(args?: {
    where?: SentenceWhereInput;
    orderBy?: SentenceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface User {
  id: ID_Output;
  email: String;
  username: String;
  avatar: String;
  password: String;
  name: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  username: () => Promise<String>;
  avatar: () => Promise<String>;
  password: () => Promise<String>;
  name: () => Promise<String>;
  mySentences: <T = FragmentableArray<Sentence>>(args?: {
    where?: SentenceWhereInput;
    orderBy?: SentenceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  dictionary: <T = DictionaryPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  username: () => Promise<AsyncIterator<String>>;
  avatar: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  mySentences: <T = Promise<AsyncIterator<SentenceSubscription>>>(args?: {
    where?: SentenceWhereInput;
    orderBy?: SentenceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  dictionary: <T = DictionarySubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface Sentence {
  id: ID_Output;
  english: String;
  korean: String;
  source?: String;
  label?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface SentencePromise extends Promise<Sentence>, Fragmentable {
  id: () => Promise<ID_Output>;
  english: () => Promise<String>;
  korean: () => Promise<String>;
  source: () => Promise<String>;
  label: () => Promise<String>;
  author: <T = UserPromise>() => T;
  dictionaries: <T = FragmentableArray<Dictionary>>(args?: {
    where?: DictionaryWhereInput;
    orderBy?: DictionaryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface SentenceSubscription
  extends Promise<AsyncIterator<Sentence>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  english: () => Promise<AsyncIterator<String>>;
  korean: () => Promise<AsyncIterator<String>>;
  source: () => Promise<AsyncIterator<String>>;
  label: () => Promise<AsyncIterator<String>>;
  author: <T = UserSubscription>() => T;
  dictionaries: <T = Promise<AsyncIterator<DictionarySubscription>>>(args?: {
    where?: DictionaryWhereInput;
    orderBy?: DictionaryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface DictionaryConnection {
  pageInfo: PageInfo;
  edges: DictionaryEdge[];
}

export interface DictionaryConnectionPromise
  extends Promise<DictionaryConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<DictionaryEdge>>() => T;
  aggregate: <T = AggregateDictionaryPromise>() => T;
}

export interface DictionaryConnectionSubscription
  extends Promise<AsyncIterator<DictionaryConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<DictionaryEdgeSubscription>>>() => T;
  aggregate: <T = AggregateDictionarySubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface DictionaryEdge {
  node: Dictionary;
  cursor: String;
}

export interface DictionaryEdgePromise
  extends Promise<DictionaryEdge>,
    Fragmentable {
  node: <T = DictionaryPromise>() => T;
  cursor: () => Promise<String>;
}

export interface DictionaryEdgeSubscription
  extends Promise<AsyncIterator<DictionaryEdge>>,
    Fragmentable {
  node: <T = DictionarySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateDictionary {
  count: Int;
}

export interface AggregateDictionaryPromise
  extends Promise<AggregateDictionary>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateDictionarySubscription
  extends Promise<AsyncIterator<AggregateDictionary>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SentenceConnection {
  pageInfo: PageInfo;
  edges: SentenceEdge[];
}

export interface SentenceConnectionPromise
  extends Promise<SentenceConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SentenceEdge>>() => T;
  aggregate: <T = AggregateSentencePromise>() => T;
}

export interface SentenceConnectionSubscription
  extends Promise<AsyncIterator<SentenceConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SentenceEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSentenceSubscription>() => T;
}

export interface SentenceEdge {
  node: Sentence;
  cursor: String;
}

export interface SentenceEdgePromise
  extends Promise<SentenceEdge>,
    Fragmentable {
  node: <T = SentencePromise>() => T;
  cursor: () => Promise<String>;
}

export interface SentenceEdgeSubscription
  extends Promise<AsyncIterator<SentenceEdge>>,
    Fragmentable {
  node: <T = SentenceSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSentence {
  count: Int;
}

export interface AggregateSentencePromise
  extends Promise<AggregateSentence>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSentenceSubscription
  extends Promise<AsyncIterator<AggregateSentence>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface DictionarySubscriptionPayload {
  mutation: MutationType;
  node: Dictionary;
  updatedFields: String[];
  previousValues: DictionaryPreviousValues;
}

export interface DictionarySubscriptionPayloadPromise
  extends Promise<DictionarySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = DictionaryPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = DictionaryPreviousValuesPromise>() => T;
}

export interface DictionarySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<DictionarySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = DictionarySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = DictionaryPreviousValuesSubscription>() => T;
}

export interface DictionaryPreviousValues {
  id: ID_Output;
}

export interface DictionaryPreviousValuesPromise
  extends Promise<DictionaryPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
}

export interface DictionaryPreviousValuesSubscription
  extends Promise<AsyncIterator<DictionaryPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
}

export interface SentenceSubscriptionPayload {
  mutation: MutationType;
  node: Sentence;
  updatedFields: String[];
  previousValues: SentencePreviousValues;
}

export interface SentenceSubscriptionPayloadPromise
  extends Promise<SentenceSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SentencePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SentencePreviousValuesPromise>() => T;
}

export interface SentenceSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SentenceSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SentenceSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SentencePreviousValuesSubscription>() => T;
}

export interface SentencePreviousValues {
  id: ID_Output;
  english: String;
  korean: String;
  source?: String;
  label?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface SentencePreviousValuesPromise
  extends Promise<SentencePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  english: () => Promise<String>;
  korean: () => Promise<String>;
  source: () => Promise<String>;
  label: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface SentencePreviousValuesSubscription
  extends Promise<AsyncIterator<SentencePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  english: () => Promise<AsyncIterator<String>>;
  korean: () => Promise<AsyncIterator<String>>;
  source: () => Promise<AsyncIterator<String>>;
  label: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  email: String;
  username: String;
  avatar: String;
  password: String;
  name: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  username: () => Promise<String>;
  avatar: () => Promise<String>;
  password: () => Promise<String>;
  name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  username: () => Promise<AsyncIterator<String>>;
  avatar: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Dictionary",
    embedded: false
  },
  {
    name: "Sentence",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
