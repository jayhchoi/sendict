// Code generated by Prisma (prisma@1.31.1). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  like: (where?: LikeWhereInput) => Promise<boolean>;
  sentence: (where?: SentenceWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  like: (where: LikeWhereUniqueInput) => LikePromise;
  likes: (args?: {
    where?: LikeWhereInput;
    orderBy?: LikeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Like>;
  likesConnection: (args?: {
    where?: LikeWhereInput;
    orderBy?: LikeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => LikeConnectionPromise;
  sentence: (where: SentenceWhereUniqueInput) => SentencePromise;
  sentences: (args?: {
    where?: SentenceWhereInput;
    orderBy?: SentenceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Sentence>;
  sentencesConnection: (args?: {
    where?: SentenceWhereInput;
    orderBy?: SentenceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SentenceConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createLike: (data: LikeCreateInput) => LikePromise;
  updateLike: (args: {
    data: LikeUpdateInput;
    where: LikeWhereUniqueInput;
  }) => LikePromise;
  upsertLike: (args: {
    where: LikeWhereUniqueInput;
    create: LikeCreateInput;
    update: LikeUpdateInput;
  }) => LikePromise;
  deleteLike: (where: LikeWhereUniqueInput) => LikePromise;
  deleteManyLikes: (where?: LikeWhereInput) => BatchPayloadPromise;
  createSentence: (data: SentenceCreateInput) => SentencePromise;
  updateSentence: (args: {
    data: SentenceUpdateInput;
    where: SentenceWhereUniqueInput;
  }) => SentencePromise;
  updateManySentences: (args: {
    data: SentenceUpdateManyMutationInput;
    where?: SentenceWhereInput;
  }) => BatchPayloadPromise;
  upsertSentence: (args: {
    where: SentenceWhereUniqueInput;
    create: SentenceCreateInput;
    update: SentenceUpdateInput;
  }) => SentencePromise;
  deleteSentence: (where: SentenceWhereUniqueInput) => SentencePromise;
  deleteManySentences: (where?: SentenceWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  like: (
    where?: LikeSubscriptionWhereInput
  ) => LikeSubscriptionPayloadSubscription;
  sentence: (
    where?: SentenceSubscriptionWhereInput
  ) => SentenceSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type SentenceOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "english_ASC"
  | "english_DESC"
  | "korean_ASC"
  | "korean_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type LikeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type LikeWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface SentenceWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  english?: String;
  english_not?: String;
  english_in?: String[] | String;
  english_not_in?: String[] | String;
  english_lt?: String;
  english_lte?: String;
  english_gt?: String;
  english_gte?: String;
  english_contains?: String;
  english_not_contains?: String;
  english_starts_with?: String;
  english_not_starts_with?: String;
  english_ends_with?: String;
  english_not_ends_with?: String;
  korean?: String;
  korean_not?: String;
  korean_in?: String[] | String;
  korean_not_in?: String[] | String;
  korean_lt?: String;
  korean_lte?: String;
  korean_gt?: String;
  korean_gte?: String;
  korean_contains?: String;
  korean_not_contains?: String;
  korean_starts_with?: String;
  korean_not_starts_with?: String;
  korean_ends_with?: String;
  korean_not_ends_with?: String;
  user?: UserWhereInput;
  likes_every?: LikeWhereInput;
  likes_some?: LikeWhereInput;
  likes_none?: LikeWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: SentenceWhereInput[] | SentenceWhereInput;
  OR?: SentenceWhereInput[] | SentenceWhereInput;
  NOT?: SentenceWhereInput[] | SentenceWhereInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  sentences_every?: SentenceWhereInput;
  sentences_some?: SentenceWhereInput;
  sentences_none?: SentenceWhereInput;
  likes_every?: LikeWhereInput;
  likes_some?: LikeWhereInput;
  likes_none?: LikeWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface LikeWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  user?: UserWhereInput;
  sentence?: SentenceWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: LikeWhereInput[] | LikeWhereInput;
  OR?: LikeWhereInput[] | LikeWhereInput;
  NOT?: LikeWhereInput[] | LikeWhereInput;
}

export type SentenceWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
}>;

export interface LikeCreateInput {
  user: UserCreateOneWithoutLikesInput;
  sentence: SentenceCreateOneWithoutLikesInput;
}

export interface UserCreateOneWithoutLikesInput {
  create?: UserCreateWithoutLikesInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateWithoutLikesInput {
  email: String;
  name: String;
  sentences?: SentenceCreateManyWithoutUserInput;
}

export interface SentenceCreateManyWithoutUserInput {
  create?: SentenceCreateWithoutUserInput[] | SentenceCreateWithoutUserInput;
  connect?: SentenceWhereUniqueInput[] | SentenceWhereUniqueInput;
}

export interface SentenceCreateWithoutUserInput {
  english: String;
  korean: String;
  tags?: SentenceCreatetagsInput;
  likes?: LikeCreateManyWithoutSentenceInput;
}

export interface SentenceCreatetagsInput {
  set?: String[] | String;
}

export interface LikeCreateManyWithoutSentenceInput {
  create?: LikeCreateWithoutSentenceInput[] | LikeCreateWithoutSentenceInput;
  connect?: LikeWhereUniqueInput[] | LikeWhereUniqueInput;
}

export interface LikeCreateWithoutSentenceInput {
  user: UserCreateOneWithoutLikesInput;
}

export interface SentenceCreateOneWithoutLikesInput {
  create?: SentenceCreateWithoutLikesInput;
  connect?: SentenceWhereUniqueInput;
}

export interface SentenceCreateWithoutLikesInput {
  english: String;
  korean: String;
  tags?: SentenceCreatetagsInput;
  user: UserCreateOneWithoutSentencesInput;
}

export interface UserCreateOneWithoutSentencesInput {
  create?: UserCreateWithoutSentencesInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateWithoutSentencesInput {
  email: String;
  name: String;
  likes?: LikeCreateManyWithoutUserInput;
}

export interface LikeCreateManyWithoutUserInput {
  create?: LikeCreateWithoutUserInput[] | LikeCreateWithoutUserInput;
  connect?: LikeWhereUniqueInput[] | LikeWhereUniqueInput;
}

export interface LikeCreateWithoutUserInput {
  sentence: SentenceCreateOneWithoutLikesInput;
}

export interface LikeUpdateInput {
  user?: UserUpdateOneRequiredWithoutLikesInput;
  sentence?: SentenceUpdateOneRequiredWithoutLikesInput;
}

export interface UserUpdateOneRequiredWithoutLikesInput {
  create?: UserCreateWithoutLikesInput;
  update?: UserUpdateWithoutLikesDataInput;
  upsert?: UserUpsertWithoutLikesInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateWithoutLikesDataInput {
  email?: String;
  name?: String;
  sentences?: SentenceUpdateManyWithoutUserInput;
}

export interface SentenceUpdateManyWithoutUserInput {
  create?: SentenceCreateWithoutUserInput[] | SentenceCreateWithoutUserInput;
  delete?: SentenceWhereUniqueInput[] | SentenceWhereUniqueInput;
  connect?: SentenceWhereUniqueInput[] | SentenceWhereUniqueInput;
  set?: SentenceWhereUniqueInput[] | SentenceWhereUniqueInput;
  disconnect?: SentenceWhereUniqueInput[] | SentenceWhereUniqueInput;
  update?:
    | SentenceUpdateWithWhereUniqueWithoutUserInput[]
    | SentenceUpdateWithWhereUniqueWithoutUserInput;
  upsert?:
    | SentenceUpsertWithWhereUniqueWithoutUserInput[]
    | SentenceUpsertWithWhereUniqueWithoutUserInput;
  deleteMany?: SentenceScalarWhereInput[] | SentenceScalarWhereInput;
  updateMany?:
    | SentenceUpdateManyWithWhereNestedInput[]
    | SentenceUpdateManyWithWhereNestedInput;
}

export interface SentenceUpdateWithWhereUniqueWithoutUserInput {
  where: SentenceWhereUniqueInput;
  data: SentenceUpdateWithoutUserDataInput;
}

export interface SentenceUpdateWithoutUserDataInput {
  english?: String;
  korean?: String;
  tags?: SentenceUpdatetagsInput;
  likes?: LikeUpdateManyWithoutSentenceInput;
}

export interface SentenceUpdatetagsInput {
  set?: String[] | String;
}

export interface LikeUpdateManyWithoutSentenceInput {
  create?: LikeCreateWithoutSentenceInput[] | LikeCreateWithoutSentenceInput;
  delete?: LikeWhereUniqueInput[] | LikeWhereUniqueInput;
  connect?: LikeWhereUniqueInput[] | LikeWhereUniqueInput;
  set?: LikeWhereUniqueInput[] | LikeWhereUniqueInput;
  disconnect?: LikeWhereUniqueInput[] | LikeWhereUniqueInput;
  update?:
    | LikeUpdateWithWhereUniqueWithoutSentenceInput[]
    | LikeUpdateWithWhereUniqueWithoutSentenceInput;
  upsert?:
    | LikeUpsertWithWhereUniqueWithoutSentenceInput[]
    | LikeUpsertWithWhereUniqueWithoutSentenceInput;
  deleteMany?: LikeScalarWhereInput[] | LikeScalarWhereInput;
}

export interface LikeUpdateWithWhereUniqueWithoutSentenceInput {
  where: LikeWhereUniqueInput;
  data: LikeUpdateWithoutSentenceDataInput;
}

export interface LikeUpdateWithoutSentenceDataInput {
  user?: UserUpdateOneRequiredWithoutLikesInput;
}

export interface LikeUpsertWithWhereUniqueWithoutSentenceInput {
  where: LikeWhereUniqueInput;
  update: LikeUpdateWithoutSentenceDataInput;
  create: LikeCreateWithoutSentenceInput;
}

export interface LikeScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: LikeScalarWhereInput[] | LikeScalarWhereInput;
  OR?: LikeScalarWhereInput[] | LikeScalarWhereInput;
  NOT?: LikeScalarWhereInput[] | LikeScalarWhereInput;
}

export interface SentenceUpsertWithWhereUniqueWithoutUserInput {
  where: SentenceWhereUniqueInput;
  update: SentenceUpdateWithoutUserDataInput;
  create: SentenceCreateWithoutUserInput;
}

export interface SentenceScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  english?: String;
  english_not?: String;
  english_in?: String[] | String;
  english_not_in?: String[] | String;
  english_lt?: String;
  english_lte?: String;
  english_gt?: String;
  english_gte?: String;
  english_contains?: String;
  english_not_contains?: String;
  english_starts_with?: String;
  english_not_starts_with?: String;
  english_ends_with?: String;
  english_not_ends_with?: String;
  korean?: String;
  korean_not?: String;
  korean_in?: String[] | String;
  korean_not_in?: String[] | String;
  korean_lt?: String;
  korean_lte?: String;
  korean_gt?: String;
  korean_gte?: String;
  korean_contains?: String;
  korean_not_contains?: String;
  korean_starts_with?: String;
  korean_not_starts_with?: String;
  korean_ends_with?: String;
  korean_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: SentenceScalarWhereInput[] | SentenceScalarWhereInput;
  OR?: SentenceScalarWhereInput[] | SentenceScalarWhereInput;
  NOT?: SentenceScalarWhereInput[] | SentenceScalarWhereInput;
}

export interface SentenceUpdateManyWithWhereNestedInput {
  where: SentenceScalarWhereInput;
  data: SentenceUpdateManyDataInput;
}

export interface SentenceUpdateManyDataInput {
  english?: String;
  korean?: String;
  tags?: SentenceUpdatetagsInput;
}

export interface UserUpsertWithoutLikesInput {
  update: UserUpdateWithoutLikesDataInput;
  create: UserCreateWithoutLikesInput;
}

export interface SentenceUpdateOneRequiredWithoutLikesInput {
  create?: SentenceCreateWithoutLikesInput;
  update?: SentenceUpdateWithoutLikesDataInput;
  upsert?: SentenceUpsertWithoutLikesInput;
  connect?: SentenceWhereUniqueInput;
}

export interface SentenceUpdateWithoutLikesDataInput {
  english?: String;
  korean?: String;
  tags?: SentenceUpdatetagsInput;
  user?: UserUpdateOneRequiredWithoutSentencesInput;
}

export interface UserUpdateOneRequiredWithoutSentencesInput {
  create?: UserCreateWithoutSentencesInput;
  update?: UserUpdateWithoutSentencesDataInput;
  upsert?: UserUpsertWithoutSentencesInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateWithoutSentencesDataInput {
  email?: String;
  name?: String;
  likes?: LikeUpdateManyWithoutUserInput;
}

export interface LikeUpdateManyWithoutUserInput {
  create?: LikeCreateWithoutUserInput[] | LikeCreateWithoutUserInput;
  delete?: LikeWhereUniqueInput[] | LikeWhereUniqueInput;
  connect?: LikeWhereUniqueInput[] | LikeWhereUniqueInput;
  set?: LikeWhereUniqueInput[] | LikeWhereUniqueInput;
  disconnect?: LikeWhereUniqueInput[] | LikeWhereUniqueInput;
  update?:
    | LikeUpdateWithWhereUniqueWithoutUserInput[]
    | LikeUpdateWithWhereUniqueWithoutUserInput;
  upsert?:
    | LikeUpsertWithWhereUniqueWithoutUserInput[]
    | LikeUpsertWithWhereUniqueWithoutUserInput;
  deleteMany?: LikeScalarWhereInput[] | LikeScalarWhereInput;
}

export interface LikeUpdateWithWhereUniqueWithoutUserInput {
  where: LikeWhereUniqueInput;
  data: LikeUpdateWithoutUserDataInput;
}

export interface LikeUpdateWithoutUserDataInput {
  sentence?: SentenceUpdateOneRequiredWithoutLikesInput;
}

export interface LikeUpsertWithWhereUniqueWithoutUserInput {
  where: LikeWhereUniqueInput;
  update: LikeUpdateWithoutUserDataInput;
  create: LikeCreateWithoutUserInput;
}

export interface UserUpsertWithoutSentencesInput {
  update: UserUpdateWithoutSentencesDataInput;
  create: UserCreateWithoutSentencesInput;
}

export interface SentenceUpsertWithoutLikesInput {
  update: SentenceUpdateWithoutLikesDataInput;
  create: SentenceCreateWithoutLikesInput;
}

export interface SentenceCreateInput {
  english: String;
  korean: String;
  tags?: SentenceCreatetagsInput;
  user: UserCreateOneWithoutSentencesInput;
  likes?: LikeCreateManyWithoutSentenceInput;
}

export interface SentenceUpdateInput {
  english?: String;
  korean?: String;
  tags?: SentenceUpdatetagsInput;
  user?: UserUpdateOneRequiredWithoutSentencesInput;
  likes?: LikeUpdateManyWithoutSentenceInput;
}

export interface SentenceUpdateManyMutationInput {
  english?: String;
  korean?: String;
  tags?: SentenceUpdatetagsInput;
}

export interface UserCreateInput {
  email: String;
  name: String;
  sentences?: SentenceCreateManyWithoutUserInput;
  likes?: LikeCreateManyWithoutUserInput;
}

export interface UserUpdateInput {
  email?: String;
  name?: String;
  sentences?: SentenceUpdateManyWithoutUserInput;
  likes?: LikeUpdateManyWithoutUserInput;
}

export interface UserUpdateManyMutationInput {
  email?: String;
  name?: String;
}

export interface LikeSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: LikeWhereInput;
  AND?: LikeSubscriptionWhereInput[] | LikeSubscriptionWhereInput;
  OR?: LikeSubscriptionWhereInput[] | LikeSubscriptionWhereInput;
  NOT?: LikeSubscriptionWhereInput[] | LikeSubscriptionWhereInput;
}

export interface SentenceSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: SentenceWhereInput;
  AND?: SentenceSubscriptionWhereInput[] | SentenceSubscriptionWhereInput;
  OR?: SentenceSubscriptionWhereInput[] | SentenceSubscriptionWhereInput;
  NOT?: SentenceSubscriptionWhereInput[] | SentenceSubscriptionWhereInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Like {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface LikePromise extends Promise<Like>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  sentence: <T = SentencePromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface LikeSubscription
  extends Promise<AsyncIterator<Like>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  sentence: <T = SentenceSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface User {
  id: ID_Output;
  email: String;
  name: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  sentences: <T = FragmentableArray<Sentence>>(args?: {
    where?: SentenceWhereInput;
    orderBy?: SentenceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  likes: <T = FragmentableArray<Like>>(args?: {
    where?: LikeWhereInput;
    orderBy?: LikeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  sentences: <T = Promise<AsyncIterator<SentenceSubscription>>>(args?: {
    where?: SentenceWhereInput;
    orderBy?: SentenceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  likes: <T = Promise<AsyncIterator<LikeSubscription>>>(args?: {
    where?: LikeWhereInput;
    orderBy?: LikeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface Sentence {
  id: ID_Output;
  english: String;
  korean: String;
  tags: String[];
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface SentencePromise extends Promise<Sentence>, Fragmentable {
  id: () => Promise<ID_Output>;
  english: () => Promise<String>;
  korean: () => Promise<String>;
  tags: () => Promise<String[]>;
  user: <T = UserPromise>() => T;
  likes: <T = FragmentableArray<Like>>(args?: {
    where?: LikeWhereInput;
    orderBy?: LikeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface SentenceSubscription
  extends Promise<AsyncIterator<Sentence>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  english: () => Promise<AsyncIterator<String>>;
  korean: () => Promise<AsyncIterator<String>>;
  tags: () => Promise<AsyncIterator<String[]>>;
  user: <T = UserSubscription>() => T;
  likes: <T = Promise<AsyncIterator<LikeSubscription>>>(args?: {
    where?: LikeWhereInput;
    orderBy?: LikeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface LikeConnection {
  pageInfo: PageInfo;
  edges: LikeEdge[];
}

export interface LikeConnectionPromise
  extends Promise<LikeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<LikeEdge>>() => T;
  aggregate: <T = AggregateLikePromise>() => T;
}

export interface LikeConnectionSubscription
  extends Promise<AsyncIterator<LikeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<LikeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateLikeSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface LikeEdge {
  node: Like;
  cursor: String;
}

export interface LikeEdgePromise extends Promise<LikeEdge>, Fragmentable {
  node: <T = LikePromise>() => T;
  cursor: () => Promise<String>;
}

export interface LikeEdgeSubscription
  extends Promise<AsyncIterator<LikeEdge>>,
    Fragmentable {
  node: <T = LikeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateLike {
  count: Int;
}

export interface AggregateLikePromise
  extends Promise<AggregateLike>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateLikeSubscription
  extends Promise<AsyncIterator<AggregateLike>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SentenceConnection {
  pageInfo: PageInfo;
  edges: SentenceEdge[];
}

export interface SentenceConnectionPromise
  extends Promise<SentenceConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SentenceEdge>>() => T;
  aggregate: <T = AggregateSentencePromise>() => T;
}

export interface SentenceConnectionSubscription
  extends Promise<AsyncIterator<SentenceConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SentenceEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSentenceSubscription>() => T;
}

export interface SentenceEdge {
  node: Sentence;
  cursor: String;
}

export interface SentenceEdgePromise
  extends Promise<SentenceEdge>,
    Fragmentable {
  node: <T = SentencePromise>() => T;
  cursor: () => Promise<String>;
}

export interface SentenceEdgeSubscription
  extends Promise<AsyncIterator<SentenceEdge>>,
    Fragmentable {
  node: <T = SentenceSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSentence {
  count: Int;
}

export interface AggregateSentencePromise
  extends Promise<AggregateSentence>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSentenceSubscription
  extends Promise<AsyncIterator<AggregateSentence>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface LikeSubscriptionPayload {
  mutation: MutationType;
  node: Like;
  updatedFields: String[];
  previousValues: LikePreviousValues;
}

export interface LikeSubscriptionPayloadPromise
  extends Promise<LikeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = LikePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = LikePreviousValuesPromise>() => T;
}

export interface LikeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<LikeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = LikeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = LikePreviousValuesSubscription>() => T;
}

export interface LikePreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface LikePreviousValuesPromise
  extends Promise<LikePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface LikePreviousValuesSubscription
  extends Promise<AsyncIterator<LikePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface SentenceSubscriptionPayload {
  mutation: MutationType;
  node: Sentence;
  updatedFields: String[];
  previousValues: SentencePreviousValues;
}

export interface SentenceSubscriptionPayloadPromise
  extends Promise<SentenceSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SentencePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SentencePreviousValuesPromise>() => T;
}

export interface SentenceSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SentenceSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SentenceSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SentencePreviousValuesSubscription>() => T;
}

export interface SentencePreviousValues {
  id: ID_Output;
  english: String;
  korean: String;
  tags: String[];
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface SentencePreviousValuesPromise
  extends Promise<SentencePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  english: () => Promise<String>;
  korean: () => Promise<String>;
  tags: () => Promise<String[]>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface SentencePreviousValuesSubscription
  extends Promise<AsyncIterator<SentencePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  english: () => Promise<AsyncIterator<String>>;
  korean: () => Promise<AsyncIterator<String>>;
  tags: () => Promise<AsyncIterator<String[]>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  email: String;
  name: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Sentence",
    embedded: false
  },
  {
    name: "Like",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
